{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "RunUnitTest",
  "steps": [
    {
      "file": "RunUnitTest.py",
      "description": "Welcome to your GitHub Copilot tour! We're going to let you come up with the prompts for this example! Let's get started by learning how run a unit test. Let's start by importing unittest module.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 1,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next, let's start by asking copilot to write a function called 'add' that will take two arguments 'a' and 'b' and returns the sum of both. \n\nPress `Next` to continue ðŸ‘‡",
      "line": 3,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next,ask copilot to define a test class 'TestAdd' that inherits from 'unittest.TestCase' and will contain four test methods. \n\nPress `Next` to continue ðŸ‘‡",
      "line": 7,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next ask copilot to define a test method called test_add_positive_numbers(), that will check that the function will correctly add two positive numbers and return the expected result.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 9,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next, ask copilot to define our 2nd test method with test_add_negative_numbers(), that will check that the function will correctly add two negative numbers and return the expected result. \n\nPress `Next` to continue ðŸ‘‡",
      "line": 13,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next, ask copilot to define our 3rd test method with test_add_positive_and_negative_numbers(), that will check that the function will correctly add a positive and negative number and return the expected result.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 17,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Next, let's define our final test method with test_add_zero_and_positive_numbers(), that will check that the function will correctly add a zero and a positive number and return the expected result. \n\nPress `Next` to continue ðŸ‘‡",
      "line": 21,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Let's test our code! To run the test, we will use 'unittest.main()' which will run all test methods defined in the 'TestAdd\" class. If any of the tests fail, 'unittest' will report which test failed.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 26,
      "contents": ""
    },
    {
      "file": "RunUnitTest.py",
      "description": "Thank you for trying out the GitHub Copilot Unit Test Demo!",
      "line": 28,
      "contents": ""
    }
  ]
}